"""autogenerated by genmsg_py from Feature.msg. Do not edit."""
import roslib.message
import struct

import gunncs_navigation_msgs.msg

class Feature(roslib.message.Message):
  _md5sum = "000ee02ac2e065fb4df37a41c0df7319"
  _type = "gunncs_navigation_msgs/Feature"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """
Bound bound
Line regression

================================================================================
MSG: gunncs_navigation_msgs/Bound

int8 lower
int8 upper

================================================================================
MSG: gunncs_navigation_msgs/Line

float32 slope
float32 y_intercept

"""
  __slots__ = ['bound','regression']
  _slot_types = ['gunncs_navigation_msgs/Bound','gunncs_navigation_msgs/Line']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.
    
    The available fields are:
       bound,regression
    
    @param args: complete set of field values, in .msg order
    @param kwds: use keyword arguments corresponding to message field names
    to set specific fields. 
    """
    if args or kwds:
      super(Feature, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.bound is None:
        self.bound = gunncs_navigation_msgs.msg.Bound()
      if self.regression is None:
        self.regression = gunncs_navigation_msgs.msg.Line()
    else:
      self.bound = gunncs_navigation_msgs.msg.Bound()
      self.regression = gunncs_navigation_msgs.msg.Line()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    @param buff: buffer
    @type  buff: StringIO
    """
    try:
      _x = self
      buff.write(_struct_2b2f.pack(_x.bound.lower, _x.bound.upper, _x.regression.slope, _x.regression.y_intercept))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    @param str: byte array of serialized message
    @type  str: str
    """
    try:
      if self.bound is None:
        self.bound = gunncs_navigation_msgs.msg.Bound()
      if self.regression is None:
        self.regression = gunncs_navigation_msgs.msg.Line()
      end = 0
      _x = self
      start = end
      end += 10
      (_x.bound.lower, _x.bound.upper, _x.regression.slope, _x.regression.y_intercept,) = _struct_2b2f.unpack(str[start:end])
      return self
    except struct.error as e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    @param buff: buffer
    @type  buff: StringIO
    @param numpy: numpy python module
    @type  numpy module
    """
    try:
      _x = self
      buff.write(_struct_2b2f.pack(_x.bound.lower, _x.bound.upper, _x.regression.slope, _x.regression.y_intercept))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    @param str: byte array of serialized message
    @type  str: str
    @param numpy: numpy python module
    @type  numpy: module
    """
    try:
      if self.bound is None:
        self.bound = gunncs_navigation_msgs.msg.Bound()
      if self.regression is None:
        self.regression = gunncs_navigation_msgs.msg.Line()
      end = 0
      _x = self
      start = end
      end += 10
      (_x.bound.lower, _x.bound.upper, _x.regression.slope, _x.regression.y_intercept,) = _struct_2b2f.unpack(str[start:end])
      return self
    except struct.error as e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill

_struct_I = roslib.message.struct_I
_struct_2b2f = struct.Struct("<2b2f")
