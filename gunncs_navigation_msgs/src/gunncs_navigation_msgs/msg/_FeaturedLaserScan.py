"""autogenerated by genmsg_py from FeaturedLaserScan.msg. Do not edit."""
import roslib.message
import struct

import std_msgs.msg
import gunncs_navigation_msgs.msg
import sensor_msgs.msg

class FeaturedLaserScan(roslib.message.Message):
  _md5sum = "956a8972458dfde76f732063f75afac1"
  _type = "gunncs_navigation_msgs/FeaturedLaserScan"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """# Processed Laser scan

sensor_msgs/LaserScan laserscan         # original laserscan

Feature[] features


================================================================================
MSG: sensor_msgs/LaserScan
# Single scan from a planar laser range-finder
#
# If you have another ranging device with different behavior (e.g. a sonar
# array), please find or create a different message, since applications
# will make fairly laser-specific assumptions about this data

Header header            # timestamp in the header is the acquisition time of 
                         # the first ray in the scan.
                         #
                         # in frame frame_id, angles are measured around 
                         # the positive Z axis (counterclockwise, if Z is up)
                         # with zero angle being forward along the x axis
                         
float32 angle_min        # start angle of the scan [rad]
float32 angle_max        # end angle of the scan [rad]
float32 angle_increment  # angular distance between measurements [rad]

float32 time_increment   # time between measurements [seconds] - if your scanner
                         # is moving, this will be used in interpolating position
                         # of 3d points
float32 scan_time        # time between scans [seconds]

float32 range_min        # minimum range value [m]
float32 range_max        # maximum range value [m]

float32[] ranges         # range data [m] (Note: values < range_min or > range_max should be discarded)
float32[] intensities    # intensity data [device-specific units].  If your
                         # device does not provide intensities, please leave
                         # the array empty.

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.secs: seconds (stamp_secs) since epoch
# * stamp.nsecs: nanoseconds since stamp_secs
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

================================================================================
MSG: gunncs_navigation_msgs/Feature

Bound bound
Line regression

================================================================================
MSG: gunncs_navigation_msgs/Bound

int8 lower
int8 upper

================================================================================
MSG: gunncs_navigation_msgs/Line

float32 slope
float32 y_intercept

"""
  __slots__ = ['laserscan','features']
  _slot_types = ['sensor_msgs/LaserScan','gunncs_navigation_msgs/Feature[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.
    
    The available fields are:
       laserscan,features
    
    @param args: complete set of field values, in .msg order
    @param kwds: use keyword arguments corresponding to message field names
    to set specific fields. 
    """
    if args or kwds:
      super(FeaturedLaserScan, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.laserscan is None:
        self.laserscan = sensor_msgs.msg.LaserScan()
      if self.features is None:
        self.features = []
    else:
      self.laserscan = sensor_msgs.msg.LaserScan()
      self.features = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    @param buff: buffer
    @type  buff: StringIO
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.laserscan.header.seq, _x.laserscan.header.stamp.secs, _x.laserscan.header.stamp.nsecs))
      _x = self.laserscan.header.frame_id
      length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_7f.pack(_x.laserscan.angle_min, _x.laserscan.angle_max, _x.laserscan.angle_increment, _x.laserscan.time_increment, _x.laserscan.scan_time, _x.laserscan.range_min, _x.laserscan.range_max))
      length = len(self.laserscan.ranges)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.pack(pattern, *self.laserscan.ranges))
      length = len(self.laserscan.intensities)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.pack(pattern, *self.laserscan.intensities))
      length = len(self.features)
      buff.write(_struct_I.pack(length))
      for val1 in self.features:
        _v1 = val1.bound
        _x = _v1
        buff.write(_struct_2b.pack(_x.lower, _x.upper))
        _v2 = val1.regression
        _x = _v2
        buff.write(_struct_2f.pack(_x.slope, _x.y_intercept))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    @param str: byte array of serialized message
    @type  str: str
    """
    try:
      if self.laserscan is None:
        self.laserscan = sensor_msgs.msg.LaserScan()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.laserscan.header.seq, _x.laserscan.header.stamp.secs, _x.laserscan.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.laserscan.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 28
      (_x.laserscan.angle_min, _x.laserscan.angle_max, _x.laserscan.angle_increment, _x.laserscan.time_increment, _x.laserscan.scan_time, _x.laserscan.range_min, _x.laserscan.range_max,) = _struct_7f.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.laserscan.ranges = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.laserscan.intensities = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.features = []
      for i in range(0, length):
        val1 = gunncs_navigation_msgs.msg.Feature()
        _v3 = val1.bound
        _x = _v3
        start = end
        end += 2
        (_x.lower, _x.upper,) = _struct_2b.unpack(str[start:end])
        _v4 = val1.regression
        _x = _v4
        start = end
        end += 8
        (_x.slope, _x.y_intercept,) = _struct_2f.unpack(str[start:end])
        self.features.append(val1)
      return self
    except struct.error as e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    @param buff: buffer
    @type  buff: StringIO
    @param numpy: numpy python module
    @type  numpy module
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.laserscan.header.seq, _x.laserscan.header.stamp.secs, _x.laserscan.header.stamp.nsecs))
      _x = self.laserscan.header.frame_id
      length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_7f.pack(_x.laserscan.angle_min, _x.laserscan.angle_max, _x.laserscan.angle_increment, _x.laserscan.time_increment, _x.laserscan.scan_time, _x.laserscan.range_min, _x.laserscan.range_max))
      length = len(self.laserscan.ranges)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.laserscan.ranges.tostring())
      length = len(self.laserscan.intensities)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.laserscan.intensities.tostring())
      length = len(self.features)
      buff.write(_struct_I.pack(length))
      for val1 in self.features:
        _v5 = val1.bound
        _x = _v5
        buff.write(_struct_2b.pack(_x.lower, _x.upper))
        _v6 = val1.regression
        _x = _v6
        buff.write(_struct_2f.pack(_x.slope, _x.y_intercept))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    @param str: byte array of serialized message
    @type  str: str
    @param numpy: numpy python module
    @type  numpy: module
    """
    try:
      if self.laserscan is None:
        self.laserscan = sensor_msgs.msg.LaserScan()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.laserscan.header.seq, _x.laserscan.header.stamp.secs, _x.laserscan.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.laserscan.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 28
      (_x.laserscan.angle_min, _x.laserscan.angle_max, _x.laserscan.angle_increment, _x.laserscan.time_increment, _x.laserscan.scan_time, _x.laserscan.range_min, _x.laserscan.range_max,) = _struct_7f.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.laserscan.ranges = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.laserscan.intensities = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.features = []
      for i in range(0, length):
        val1 = gunncs_navigation_msgs.msg.Feature()
        _v7 = val1.bound
        _x = _v7
        start = end
        end += 2
        (_x.lower, _x.upper,) = _struct_2b.unpack(str[start:end])
        _v8 = val1.regression
        _x = _v8
        start = end
        end += 8
        (_x.slope, _x.y_intercept,) = _struct_2f.unpack(str[start:end])
        self.features.append(val1)
      return self
    except struct.error as e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill

_struct_I = roslib.message.struct_I
_struct_7f = struct.Struct("<7f")
_struct_3I = struct.Struct("<3I")
_struct_2f = struct.Struct("<2f")
_struct_2b = struct.Struct("<2b")
